name: "Test"

on:
  workflow_dispatch:
  push:
    branches:
      - "development"
      - "testing"

jobs:
  pytest-linux:
    name: pytest on Linux (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Setup Poetry"
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.7.1"
      - name: "Install deps and tools"
        run: |
          poetry install --with test;
          pip3 install appsurifyci --pre;
          pip3 install appsurify-testbrain-cli;
      - name: "Run tests"
        run: |
          poetry run pytest --junitxml=reports/pytest/${{ github.sha }}/linux/pytest-linux-py${{ matrix.python-version }}.xml -o junit_suite_name=pytest-linux-py${{ matrix.python-version }}
  pytest-macos:
    name: pytest on macOS (py${{ matrix.python-version }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Setup Poetry"
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.7.1"
      - name: "Install deps and tools"
        run: |
          poetry install --with test;
          pip3 install appsurifyci --pre;
          pip3 install appsurify-testbrain-cli;
      - name: "Run tests"
        run: |
          poetry run pytest --junitxml=reports/pytest/${{ github.sha }}/macos/pytest-macos-py${{ matrix.python-version }}.xml -o junit_suite_name=pytest-macos-py${{ matrix.python-version }}
  pytest-windows:
    name: pytest on Windows (py${{ matrix.python-version }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: "Setup Poetry"
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.7.1"
      - name: "Install deps and tools"
        run: |
          poetry install --with test;
          pip3 install appsurifyci --pre;
          pip3 install appsurify-testbrain-cli;
      - name: "Run tests"
        run: |
          poetry run pytest --junitxml=reports/pytest/${{ github.sha }}/windows/pytest-windows-py${{ matrix.python-version }}.xml -o junit_suite_name=pytest-windows-py${{ matrix.python-version }}

#      - name: "Upload reports to TB Server"
#        if: always()
#        run: |
#          testbrain report push --server ${{ vars.TESTBRAIN_SERVER }} --token ${{ secrets.TESTBRAIN_TOKEN }} --project ${{ vars.TESTBRAIN_PROJECT }} --testsuite "pytest" --branch ${{ github.ref_name }} --commit ${{ github.sha }} --report-type "junit" --import-type "prioritized" --path reports/pytest/${{ github.sha }}/${{ matrix.os }}/pytest-py${{ matrix.python-version }}.xml; python3 -c "exit()"
#      - name: "Upload Test Reports"
#        uses: actions/upload-artifact@v4
#        with:
#            name: reports-pytest-${{ github.sha }}
#            path: reports/pytest/${{ github.sha }}/${{ matrix.os }}/pytest-py${{ matrix.python-version }}.xml
#            retention-days: 7
#  run-testbrain-report:
#    name: pytest upload reports to testbrain
#    runs-on: ${{ matrix.image }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ Ubuntu, macOS, Windows ]
#        include:
#          - os: Ubuntu
#            image: ubuntu-latest
#          - os: Windows
#            image: windows-latest
#          - os: macOS
#            image: macos-latest
#    steps:
#      - name: "Download Test Reports"
#        uses: actions/download-artifact@v4
#        with:
#          name:
