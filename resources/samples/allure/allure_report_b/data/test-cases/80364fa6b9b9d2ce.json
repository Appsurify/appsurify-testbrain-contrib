{"uid":"80364fa6b9b9d2ce","name":"test_step_with_reused_threads","fullName":"tests.allure_pytest.acceptance.step.test_step_with_several_step_inside_thread#test_step_with_reused_threads","historyId":"96ffe407f4d30fbe8bfd0a00f6f417ae","time":{"start":1710860849934,"stop":1710860849954,"duration":20},"description":"\n    >>> from concurrent.futures import ThreadPoolExecutor\n    >>> from threading import Event\n    >>> from random import shuffle\n    >>> from time import sleep\n    >>> import allure\n\n    >>> def parallel_step(data):\n    ...     event, index = data\n    ...     with allure.step(f\"thread {index}\"):\n    ...         event.wait()\n\n    >>> def __execute_randomly(executor):\n    ...     events = [Event() for i in range(1, 4)]\n    ...     executor.map(parallel_step, zip(events, range(1, 4)))\n    ...     shuffle(events)\n    ...     for e in events:\n    ...         e.set()\n\n    >>> def test_thread():\n    ...     with ThreadPoolExecutor(max_workers=2) as executor:\n    ...         __execute_randomly(executor)\n    ...     with allure.step(\"Reuse previous threads\"):\n    ...         with ThreadPoolExecutor(max_workers=2) as executor:\n    ...             __execute_randomly(executor)\n    ","descriptionHtml":"<pre><code>&gt;&gt;&gt; from concurrent.futures import ThreadPoolExecutor\n&gt;&gt;&gt; from threading import Event\n&gt;&gt;&gt; from random import shuffle\n&gt;&gt;&gt; from time import sleep\n&gt;&gt;&gt; import allure\n\n&gt;&gt;&gt; def parallel_step(data):\n...     event, index = data\n...     with allure.step(f&quot;thread {index}&quot;):\n...         event.wait()\n\n&gt;&gt;&gt; def __execute_randomly(executor):\n...     events = [Event() for i in range(1, 4)]\n...     executor.map(parallel_step, zip(events, range(1, 4)))\n...     shuffle(events)\n...     for e in events:\n...         e.set()\n\n&gt;&gt;&gt; def test_thread():\n...     with ThreadPoolExecutor(max_workers=2) as executor:\n...         __execute_randomly(executor)\n...     with allure.step(&quot;Reuse previous threads&quot;):\n...         with ThreadPoolExecutor(max_workers=2) as executor:\n...             __execute_randomly(executor)\n</code></pre>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"tmp_path_factory","time":{"start":1710860843563,"stop":1710860843564,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"pytester","time":{"start":1710860849930,"stop":1710860849934,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1710860849930,"stop":1710860849930,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"allure_pytest_runner","time":{"start":1710860849934,"stop":1710860849934,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"description":"\n    >>> from concurrent.futures import ThreadPoolExecutor\n    >>> from threading import Event\n    >>> from random import shuffle\n    >>> from time import sleep\n    >>> import allure\n\n    >>> def parallel_step(data):\n    ...     event, index = data\n    ...     with allure.step(f\"thread {index}\"):\n    ...         event.wait()\n\n    >>> def __execute_randomly(executor):\n    ...     events = [Event() for i in range(1, 4)]\n    ...     executor.map(parallel_step, zip(events, range(1, 4)))\n    ...     shuffle(events)\n    ...     for e in events:\n    ...         e.set()\n\n    >>> def test_thread():\n    ...     with ThreadPoolExecutor(max_workers=2) as executor:\n    ...         __execute_randomly(executor)\n    ...     with allure.step(\"Reuse previous threads\"):\n    ...         with ThreadPoolExecutor(max_workers=2) as executor:\n    ...             __execute_randomly(executor)\n    ","status":"passed","steps":[],"attachments":[{"uid":"ee4a27fe653993fa","name":"stdout","source":"ee4a27fe653993fa.txt","type":"text/plain","size":1071}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false},"afterStages":[{"name":"allure_pytest_runner::0","time":{"start":1710860849955,"stop":1710860849955,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"pytester::_finalize","time":{"start":1710860849955,"stop":1710860849955,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1710860849955,"stop":1710860849955,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.allure_pytest.acceptance.step"},{"name":"suite","value":"test_step_with_several_step_inside_thread"},{"name":"host","value":"MacBook-Pro-whenessel.local"},{"name":"thread","value":"17648-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.allure_pytest.acceptance.step.test_step_with_several_step_inside_thread"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":[]},"source":"80364fa6b9b9d2ce.json","parameterValues":[]}